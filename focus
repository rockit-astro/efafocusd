#!/usr/bin/env python3
#
# This file is part of efafocusd.
#
# efafocusd is free software: you can redistribute it and/or modify
# it under the terms of the GNU General Public License as published by
# the Free Software Foundation, either version 3 of the License, or
# (at your option) any later version.
#
# efafocusd is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
# GNU General Public License for more details.
#
# You should have received a copy of the GNU General Public License
# along with efafocusd.  If not, see <http://www.gnu.org/licenses/>.

"""Commandline client for controlling a Planewave focus controller"""

import datetime
import glob
import json
import os
import sys
import Pyro4
from warwick.observatory.common import TFmt
from warwick.observatory.efafocus import Config, CommandStatus, FocuserStatus


SCRIPT_NAME = os.path.basename(sys.argv[0])
sys.excepthook = Pyro4.util.excepthook


def run_command(command, args):
    """Runs a daemon command, handling error messages"""
    if 'FOCUSD_CONFIG_PATH' in os.environ:
        config = Config(os.environ['FOCUSD_CONFIG_PATH'])
    else:
        # Load the config file defined in the FOCUSD_CONFIG_PATH environment variable or from the
        # default system location (/etc/pipelined/). Exit with an error if zero or multiple are found.
        files = glob.glob("/etc/focusd/*.json")
        if len(files) != 1:
            print('error: failed to guess the default config file. ' +
                  'Run as FOCUSD_CONFIG_PATH=/path/to/config.json pipeline <command>')
            return 1

        config = Config(files[0])

    try:
        ret = command(config, args)
    except Pyro4.errors.CommunicationError:
        ret = -101

    # Print message associated with error codes, except for -1 (error handled locally)
    if ret not in [-1, 0]:
        print(CommandStatus.message(ret))
    sys.exit(ret)


def print_status(config, _):
    """Prints a human-readable summary of the focuser status"""
    with config.daemon.connect() as focusd:
        data = focusd.report_status()

    if data is not None:
        date = datetime.datetime.strptime(data['date'], '%Y-%m-%dT%H:%M:%SZ')
        print('Data received ' + TFmt.Bold + str(date) + TFmt.Clear + ':')
        status = data['status']
        print('   Status: ' + FocuserStatus.label(status, True))
        if status < FocuserStatus.Idle:
            return 0

        print(f' Position: {TFmt.Bold}{data["current_steps"]:07d}{TFmt.Clear} steps{TFmt.Clear}')
        print(f'   Target: {TFmt.Bold}{data["target_steps"]:07d}{TFmt.Clear} steps{TFmt.Clear}')
        if data["primary_temperature"] is not None:
            print(f'Pri. Temp: {TFmt.Bold}{data["primary_temperature"]:.1f}{TFmt.Clear}\u00B0C')
        if data["ambient_temperature"] is not None:
            print(f'Amb. Temp: {TFmt.Bold}{data["ambient_temperature"]:.1f}{TFmt.Clear}\u00B0C')
        print(f' OTA Fans: {TFmt.Bold}{"ENABLED" if data["fans_enabled"] else "DISABLED"}{TFmt.Clear}')
    return 0


def print_json(config, _):
    """Prints a machine-readable summary of the focuser status"""
    with config.daemon.connect() as focusd:
        print(json.dumps(focusd.report_status() or {}))

    return 0


def set_position(config, args):
    """Request a focuser channel to move a specific step position"""
    try:
        if len(args) == 1:
            position = int(args[0])

            try:
                with config.daemon.connect(timeout=0) as focusd:
                    return focusd.set_focus(position)
            except KeyboardInterrupt:
                # ctrl-c terminates the running command
                with config.daemon.connect() as focusd:
                    return focusd.stop()
    except ValueError:
        pass
    print(f'usage: {SCRIPT_NAME} set <step position>')
    return -1


def offset_position(config, args):
    """Request a focuser channel to move by a specific step delta"""
    try:
        if len(args) == 1:
            delta = int(args[0])

            try:
                with config.daemon.connect(timeout=0) as focusd:
                    return focusd.set_focus(delta, offset=True)
            except KeyboardInterrupt:
                # ctrl-c terminates the running command
                with config.daemon.connect() as focusd:
                    return focusd.stop()
    except ValueError:
        pass
    print(f'usage: {SCRIPT_NAME} offset <step delta>')
    return -1


def stop(config, _):
    """Stop a focuser channel"""
    with config.daemon.connect() as focusd:
        return focusd.stop()


def set_home_position(config, _):
    """Sets the current focuser position to the home position"""
    with config.daemon.connect() as focusd:
        return focusd.reset_home_position()


def enable_fans(config, args):
    """Enable or disable OTA fans"""
    if len(args) == 1 and args[0] in ['enable', 'disable']:
        with config.daemon.connect() as focusd:
            return focusd.enable_fans(args[0] == 'enable')

    print(f'usage: {SCRIPT_NAME} offset <step delta>')
    return -1


def initialize(config, _):
    """Connect to the focuser"""
    with config.daemon.connect() as focusd:
        return focusd.initialize()


def shutdown(config, _):
    """Disconnect from the focuser"""
    with config.daemon.connect() as focusd:
        return focusd.shutdown()


def print_usage():
    """Prints the utility help"""
    print(f'usage: {SCRIPT_NAME} <command> [<args>]')
    print()
    print('general commands:')
    print('   set          request the focuser to move to a given absolute position')
    print('   offset       request the focuser to move by a given offset delta')
    print('   stop         request the focuser to stop moving')
    print('   status       print a human-readable summary of the focuser status')
    print('   json         print a machine-readable summary of the focuser status')
    print('engineering commands:')
    print('   zero         sets the current focuser position to the home position')
    print('   init         connect to the focuser')
    print('   kill         disconnect from the focuser')
    print()

    return 0


if __name__ == '__main__':
    commands = {
        'set': set_position,
        'offset': offset_position,
        'stop': stop,
        'status': print_status,
        'json': print_json,
        'zero': set_home_position,
        'fans': enable_fans,
        'init': initialize,
        'kill': shutdown
    }

    if len(sys.argv) >= 2 and sys.argv[1] in commands:
        sys.exit(run_command(commands[sys.argv[1]], sys.argv[2:]))

    sys.exit(print_usage())
